import {
  IntegrationExecutionContext,
  IntegrationStepExecutionContext,
} from './context';
import { IntegrationInstanceConfig } from './instance';

export interface IntegrationStepStartState {
  /**
   * Indicates the step is disabled and should not be
   * executed by the state machine.
   */
  disabled: boolean;
}

export type IntegrationStepStartStates = Record<
  string,
  IntegrationStepStartState
>;

export type GetStepStartStatesFunction<
  TConfig extends IntegrationInstanceConfig = IntegrationInstanceConfig
> = (
  context: IntegrationExecutionContext<TConfig>,
) => IntegrationStepStartStates;

export type StepExecutionHandlerFunction<
  TConfig extends IntegrationInstanceConfig = IntegrationInstanceConfig
> = (context: IntegrationStepExecutionContext<TConfig>) => Promise<void> | void;

export enum IntegrationStepResultStatus {
  SUCCESS = 'success',
  FAILURE = 'failure',
  PARTIAL_SUCCESS_DUE_TO_DEPENDENCY_FAILURE = 'partial_success_due_to_dependency_failure',
  DISABLED = 'disabled',
  PENDING_EVALUATION = 'pending_evaluation',
}

export type IntegrationStep<
  TConfig extends IntegrationInstanceConfig = IntegrationInstanceConfig
> = IntegrationStepMetadata & {
  /**
   * Function that runs to perform the stpe that
   */
  executionHandler: StepExecutionHandlerFunction<TConfig>;
};

export type IntegrationStepResult = Omit<IntegrationStepMetadata, 'types'> & {
  status: IntegrationStepResultStatus;

  /**
   * Entity or relatioship types that were declared
   * when the step was configured.
   */
  declaredTypes: string[];

  /**
   * Entity or relationship types that were encountered during
   * the step's execution.
   */
  encounteredTypes: string[];
};

interface IntegrationStepMetadata {
  /*
   * Identifier used to reference and track steps
   */
  id: string;

  /**
   * Friendly name that will be displayed in debug logs
   * and to customers in the job event log.
   */
  name: string;

  /**
   * Entity or relationship types that are expected to be
   * generated by this step
   */
  types: string[];

  /**
   * An optional array of other step ids that need to execute
   * before the current step can.
   */
  dependsOn?: string[];
}
